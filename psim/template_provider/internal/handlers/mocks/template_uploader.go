// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"
import s3 "github.com/aws/aws-sdk-go/service/s3"

// TemplateUploader is an autogenerated mock type for the TemplateUploader type
type TemplateUploader struct {
	mock.Mock
}

// NewRequest provides a mock function with given fields: operation, params, data
func (_m *TemplateUploader) NewRequest(operation *request.Operation, params interface{}, data interface{}) *request.Request {
	ret := _m.Called(operation, params, data)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*request.Operation, interface{}, interface{}) *request.Request); ok {
		r0 = rf(operation, params, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	return r0
}

// PutObject provides a mock function with given fields: input
func (_m *TemplateUploader) PutObject(input *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
	ret := _m.Called(input)

	var r0 *s3.PutObjectOutput
	if rf, ok := ret.Get(0).(func(*s3.PutObjectInput) *s3.PutObjectOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.PutObjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*s3.PutObjectInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
