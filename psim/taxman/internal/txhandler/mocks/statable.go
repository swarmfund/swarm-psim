// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import state "gitlab.com/tokend/psim/psim/taxman/internal/state"
import time "time"

// Statable is an autogenerated mock type for the Statable type
type Statable struct {
	mock.Mock
}

// AddAccount provides a mock function with given fields: account
func (_m *Statable) AddAccount(account state.Account) {
	_m.Called(account)
}

// GetAccount provides a mock function with given fields: accountID
func (_m *Statable) GetAccount(accountID state.AccountID) *state.Account {
	ret := _m.Called(accountID)

	var r0 *state.Account
	if rf, ok := ret.Get(0).(func(state.AccountID) *state.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Account)
		}
	}

	return r0
}

// GetOperationalAccount provides a mock function with given fields:
func (_m *Statable) GetOperationalAccount() state.AccountID {
	ret := _m.Called()

	var r0 state.AccountID
	if rf, ok := ret.Get(0).(func() state.AccountID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(state.AccountID)
	}

	return r0
}

// GetSpecialAccount provides a mock function with given fields: accountID
func (_m *Statable) GetSpecialAccount(accountID state.AccountID) *state.Account {
	ret := _m.Called(accountID)

	var r0 *state.Account
	if rf, ok := ret.Get(0).(func(state.AccountID) *state.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Account)
		}
	}

	return r0
}

// IsSpecialAccount provides a mock function with given fields: accountID
func (_m *Statable) IsSpecialAccount(accountID state.AccountID) bool {
	ret := _m.Called(accountID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(state.AccountID) bool); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetLedger provides a mock function with given fields: ledger
func (_m *Statable) SetLedger(ledger int64) {
	_m.Called(ledger)
}

// SetPayoutPeriod provides a mock function with given fields: d
func (_m *Statable) SetPayoutPeriod(d *time.Duration) {
	_m.Called(d)
}

// SetToken provides a mock function with given fields: asset, token
func (_m *Statable) SetToken(asset state.AssetCode, token state.AssetCode) {
	_m.Called(asset, token)
}
