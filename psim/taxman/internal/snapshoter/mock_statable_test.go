// Code generated by mockery v1.0.0
package snapshoter

import mock "github.com/stretchr/testify/mock"
import state "gitlab.com/tokend/psim/psim/taxman/internal/state"

// mockStatable is an autogenerated mock type for the statable type
type mockStatable struct {
	mock.Mock
}

// GetAccount provides a mock function with given fields: address
func (_m *mockStatable) GetAccount(address state.AccountID) *state.Account {
	ret := _m.Called(address)

	var r0 *state.Account
	if rf, ok := ret.Get(0).(func(state.AccountID) *state.Account); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Account)
		}
	}

	return r0
}

// GetAssetByToken provides a mock function with given fields: token
func (_m *mockStatable) GetAssetByToken(token state.AssetCode) state.AssetCode {
	ret := _m.Called(token)

	var r0 state.AssetCode
	if rf, ok := ret.Get(0).(func(state.AssetCode) state.AssetCode); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(state.AssetCode)
	}

	return r0
}

// GetChildren provides a mock function with given fields:
func (_m *mockStatable) GetChildren() chan *state.Account {
	ret := _m.Called()

	var r0 chan *state.Account
	if rf, ok := ret.Get(0).(func() chan *state.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *state.Account)
		}
	}

	return r0
}

// GetCommissionAccount provides a mock function with given fields:
func (_m *mockStatable) GetCommissionAccount() state.AccountID {
	ret := _m.Called()

	var r0 state.AccountID
	if rf, ok := ret.Get(0).(func() state.AccountID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(state.AccountID)
	}

	return r0
}

// GetLedger provides a mock function with given fields:
func (_m *mockStatable) GetLedger() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetMainBalanceForAsset provides a mock function with given fields: accountID, asset
func (_m *mockStatable) GetMainBalanceForAsset(accountID state.AccountID, asset state.AssetCode) *state.Balance {
	ret := _m.Called(accountID, asset)

	var r0 *state.Balance
	if rf, ok := ret.Get(0).(func(state.AccountID, state.AssetCode) *state.Balance); ok {
		r0 = rf(accountID, asset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Balance)
		}
	}

	return r0
}

// GetMasterAccount provides a mock function with given fields:
func (_m *mockStatable) GetMasterAccount() state.AccountID {
	ret := _m.Called()

	var r0 state.AccountID
	if rf, ok := ret.Get(0).(func() state.AccountID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(state.AccountID)
	}

	return r0
}

// GetOperationalAccount provides a mock function with given fields:
func (_m *mockStatable) GetOperationalAccount() state.AccountID {
	ret := _m.Called()

	var r0 state.AccountID
	if rf, ok := ret.Get(0).(func() state.AccountID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(state.AccountID)
	}

	return r0
}

// GetSpecialAccounts provides a mock function with given fields:
func (_m *mockStatable) GetSpecialAccounts() *state.Accounts {
	ret := _m.Called()

	var r0 *state.Accounts
	if rf, ok := ret.Get(0).(func() *state.Accounts); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Accounts)
		}
	}

	return r0
}

// GetTotalFeesToShare provides a mock function with given fields:
func (_m *mockStatable) GetTotalFeesToShare() map[state.AssetCode]int64 {
	ret := _m.Called()

	var r0 map[state.AssetCode]int64
	if rf, ok := ret.Get(0).(func() map[state.AssetCode]int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[state.AssetCode]int64)
		}
	}

	return r0
}

// GetTotalTokensAmount provides a mock function with given fields:
func (_m *mockStatable) GetTotalTokensAmount() map[state.AssetCode]int64 {
	ret := _m.Called()

	var r0 map[state.AssetCode]int64
	if rf, ok := ret.Get(0).(func() map[state.AssetCode]int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[state.AssetCode]int64)
		}
	}

	return r0
}

// PayoutCompleted provides a mock function with given fields:
func (_m *mockStatable) PayoutCompleted() {
	_m.Called()
}

// TokenBalances provides a mock function with given fields:
func (_m *mockStatable) TokenBalances() chan *state.Balance {
	ret := _m.Called()

	var r0 chan *state.Balance
	if rf, ok := ret.Get(0).(func() chan *state.Balance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *state.Balance)
		}
	}

	return r0
}
