// Code generated by go-bindata.
// sources:
// airdrop.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _airdropHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1c\x7f\x6f\xe3\xb6\xf5\xff\x7c\x0a\x9e\x8a\xb6\x1b\x50\x59\xb2\x73\x49\xef\x24\xd9\xd8\x2d\x57\xb4\x03\xee\xd6\x43\x93\xa1\x2b\x86\xfd\x41\x8b\xb4\xc5\x85\x22\x35\x92\xf2\x8f\x1e\xee\x03\xed\x6b\xec\x93\x0d\x24\x25\x47\xb2\xad\x44\xb6\xf2\xeb\x6e\x52\x80\xd8\x14\xc9\xf7\x9b\xef\x3d\x3e\x51\x8e\x5e\xbc\xfd\xf9\xe2\xea\xb7\x0f\x3f\x80\x44\xa5\x14\x7c\xf8\xdb\x9f\xdf\xfd\xe5\x02\x38\xae\xe7\xfd\x7a\x7a\xe1\x79\x6f\xaf\xde\x82\xbf\xff\x74\xf5\xfe\x1d\x18\x0e\x7c\x70\x25\x20\x93\x44\x11\xce\x20\xf5\xbc\x1f\xfe\xea\x9c\x80\xe2\x72\x12\xa5\xb2\xc0\xf3\x96\xcb\xe5\x60\x79\x3a\xe0\x62\xee\x5d\xfd\xe2\xad\x34\xcc\xa1\x06\x52\x7c\x75\x55\x05\xc2\x00\x29\xe4\x4c\x4e\x22\x83\x78\x95\x52\x26\xc7\x7b\xc0\x0c\x5f\xbf\x7e\x6d\x67\x3b\x80\x42\x36\x1f\x3b\x98\x39\x7a\x78\x70\xd3\x92\x6a\x4d\xf1\xd8\x99\xc2\xf8\x7a\x2e\x78\xce\x50\xf0\xd5\xec\x54\xff\xbd\x20\x69\xc6\x85\x82\x4c\x19\x44\x18\xa2\x89\x21\x39\x4a\xb1\x82\x40\x23\x73\xf1\xbf\x73\xb2\x18\x3b\x17\x9c\x29\xcc\x94\x7b\xb5\xce\xb0\x03\x62\xdb\x1a\x3b\x0a\xaf\x94\xa7\x91\x87\x20\x4e\xa0\x90\x58\x8d\x73\x35\x73\x5f\x39\x55\x38\x0c\xa6\x78\xec\x2c\x08\x5e\x6a\x64\x95\xd9\x4b\x82\x54\x32\x46\x78\x41\x62\xec\x9a\x46\x39\x4f\x11\x45\xf1\xe4\x72\x09\x45\x0a\xde\x10\x81\x04\xcf\xc0\x65\x1e\xc7\x58\xca\xc8\xb3\x9d\x76\xa0\x61\x6d\xf2\xa7\x14\x23\x02\x01\x67\x74\x0d\x64\x2c\x30\x66\xe0\xe3\x46\xf6\x46\x7e\x37\x4d\x7d\xa5\x84\xb9\x09\x26\xf3\x44\x05\x60\xe8\xfb\x5f\x87\xb5\xde\x8a\x9c\x40\x21\xa8\x4d\xff\xa7\x13\xfb\xdf\x7c\xec\x41\x0b\x19\x02\x7f\x48\xe1\xca\xb2\x13\x80\xb3\xd7\xe7\xd9\xea\x8f\x15\xf4\x0a\x4e\x29\x1e\x4c\x39\x5a\x03\x92\xce\xb7\xe8\x2a\x26\xc1\x5c\xf1\x3a\x49\x25\xb1\xba\xa7\x42\xcb\x3e\xa8\x31\x66\x0a\x8b\x3d\x0c\x17\xc0\x7d\x70\xa3\xf5\x3b\x40\x0d\xb4\xa6\x20\x61\x3b\xe0\x0a\x50\xaf\xcf\xbe\x3e\x08\x18\xcd\x53\x26\xb7\x40\x55\x39\xab\x00\xab\xb3\xef\xa6\xfc\x77\x77\xca\x57\xae\x24\xbf\x13\x36\x0f\xc0\x94\x0b\x84\x85\xbe\xb5\x35\x70\x89\xa7\xd7\x44\xb5\x1a\xdb\x66\x4c\x06\x11\x22\x6c\xee\x52\x3c\xd3\xa6\x72\x9e\xad\x1a\x69\x2c\x87\x8a\xc2\xac\xea\x63\xdb\x0a\xa7\x41\x4a\x75\x3a\xfc\xb6\x44\xdc\xa9\xeb\x64\x20\x53\x48\xa9\x7b\xbe\x85\x0f\x11\x99\x51\xb8\x0e\x00\x61\x94\x30\xec\x4e\x29\x8f\xaf\x1b\xb1\x96\xb6\xee\xdf\x69\x0e\x25\xbe\xe1\xe8\x3e\x10\xea\xa5\x7b\x07\xc6\x8d\x3c\x5b\xa0\xbe\x2f\x9c\x56\xaf\x29\x66\xf9\xfe\x65\x73\x18\x08\x85\xbe\xab\x35\x93\x66\x9f\xd1\x48\xfb\x5d\xd2\xbd\x9d\x84\xc1\x02\x0b\x45\x62\x48\xb7\x68\xa9\xdc\xdf\x26\xaa\x51\xa6\xb7\x63\xfa\x07\xa4\x64\xce\xc6\xd6\x85\xfd\xb3\x15\xa3\xdb\x9e\x39\xf2\x6c\x48\x38\x89\x3c\x1b\xcf\x22\xb3\xc0\x8a\x10\xb8\xed\x48\x2a\xeb\xde\x4d\xa5\xab\xc3\x99\xee\xc2\x2e\x44\xff\xca\xa5\x0a\x4c\x70\xd8\xe3\x54\xaa\xf3\x8a\xde\xfd\x73\xdf\x43\x31\x27\x2c\xf0\xc3\xdb\x82\x6f\xb8\x1f\x72\xcc\x29\x17\xc1\x57\x3e\xd4\x7f\xe1\x8c\x33\xe5\xce\x60\x4a\xe8\x3a\xf8\xf6\x92\xe7\x22\xc6\xe0\x12\x32\x09\x3e\x08\xfe\xed\x77\x12\x32\xe9\x4a\x2c\xc8\xcc\x0e\xd4\x84\x04\xda\x07\xd9\xe6\xd2\x7a\xd9\x97\xbe\x1f\x1a\x03\x28\xbc\xee\x70\x70\x1a\xa6\x25\x85\x37\x31\xc2\x50\x5e\xb8\x92\xc0\x0f\x0d\x67\x46\x33\x81\xf6\x3f\xe1\xcd\xa0\x7a\xfe\x20\x33\xc8\x40\x4c\xa1\x94\x63\x27\x13\x58\x8b\x1f\x8b\x32\x07\x2a\x14\x50\xf0\x64\x25\x10\x96\x66\xc2\x38\xc3\x15\x71\x54\x38\xc8\x56\x75\x82\xb3\x55\xa8\xa3\x6b\xd1\xf4\xc3\x9b\x50\xeb\x87\xa9\xe4\x6e\x42\x10\x0e\x20\xa5\x15\x68\x3c\x83\x31\x51\xeb\xc0\x0f\xf9\x02\x8b\x19\xe5\xcb\x20\x21\x08\x61\x16\x2e\x88\x24\x53\x42\x75\xa7\xbd\xe3\x4c\x22\x4f\x73\x31\x39\x89\x8c\x51\x96\xdc\x68\x13\xda\x24\x73\x05\x27\x6d\x35\x6b\xd4\x19\x73\x4a\x61\x26\x71\x50\x7e\x29\x3b\xa4\x26\xce\x48\xf9\x61\xb4\x5d\xca\x4d\x6b\xb4\x51\xf3\xcd\xaa\x2e\x57\x78\x71\x4f\xf1\xac\xa2\xfd\x4d\xb2\x26\x4a\x99\x1c\x02\xa8\x98\x6d\x21\xa0\x52\xd2\x76\xe9\x3b\xc0\x3a\x82\x4d\x73\x51\xb4\xf5\xbc\x9a\x53\xa8\xae\xeb\x64\x9d\x25\x98\xc9\xc0\xa4\x4f\xe5\xb2\xac\xdd\xbc\xd1\x59\x83\x5a\x2a\x9a\x7b\x20\x7d\x54\xc9\xb9\x27\x85\x70\x81\xdc\xa5\x80\x59\x30\x15\x18\x5e\xbb\xba\x5d\x11\xae\x11\x70\x91\x14\x22\xa8\xa0\x9b\xe9\x3c\x1d\x8d\x9d\xcd\xbe\xe0\x66\xe1\x9f\xbd\xf2\xb3\xd5\xae\x86\x6b\xa0\xec\xc2\xd8\xd2\x4f\xa9\xbd\x4d\xbe\x38\xa3\x1c\x2a\xb7\xe8\xde\x01\xb2\x7f\x25\xd9\xbc\xb7\xb6\x9c\xb0\xfe\x3b\x60\x11\x19\xb4\xc6\x9d\x6c\x84\x69\xa1\xee\x95\xa8\x25\xaf\xd9\xc8\x8d\x38\xf6\xc8\xc0\xca\x41\x3b\x85\xa6\xbe\xae\x2b\x62\x17\x22\xea\x4d\xbd\x95\xa9\x37\xd8\x6b\x61\xa0\x82\x2f\x41\x3d\x2e\xdd\x7a\xed\xdb\x38\x1f\x6a\x92\x65\x8c\x33\x74\x54\xd8\xcd\xb8\xdd\xe8\x07\x02\x53\xa8\xc8\x02\x1f\xe5\x7c\x6f\x67\xbd\xd9\x44\xeb\xe3\xee\xdb\x5c\xeb\xd0\x93\x52\xfa\xe5\x5e\x83\x42\x31\xc7\xee\x39\x28\x73\xf3\x19\x11\x52\x01\x0a\xa5\x6a\xa5\x95\xaa\x6a\xea\xbe\xe3\x71\x33\xa6\x6d\xcf\x52\x6e\xbe\xa6\x5c\x29\x9e\x56\x6e\x98\x5d\x9b\x01\x5d\xdf\x9f\x99\x5b\xfb\xb3\xab\xd1\xf7\x2f\x1b\x5d\xcf\x7e\x29\x1b\x33\x2f\x0d\xb6\xb5\x75\x76\x0b\xfd\xed\xa9\x7b\x48\x0b\xab\x63\x4a\x76\x12\xb4\x47\xce\xa3\x1b\x39\x3c\x82\x1d\xb0\xe3\xc1\xb4\xea\x5a\x7a\xaf\xa6\xeb\x99\x1a\x49\x9d\xe7\x76\xae\xab\x79\xfe\x63\x19\x5c\x1d\x2b\x2a\xea\x59\x63\x67\xa8\x53\x87\x4e\xd0\xc0\x33\x4f\x6f\xfd\x83\x62\xbe\x6f\x76\x6e\xe5\x56\x53\x72\xb7\xd2\xeb\x8a\x9c\xe2\x00\xaf\x60\xac\xe8\xfa\xc1\x33\x82\x36\xd7\x37\x5f\xad\xde\xf8\x61\x37\x63\xf0\x14\xea\x60\xc0\x9e\x12\x9d\x66\x1f\xbf\x7e\x22\xcf\x38\x9c\x23\x27\x93\x74\xbe\x59\x03\x67\xdd\xd6\x80\x14\xf1\xe6\x89\x87\x54\x70\x4e\xd8\x7c\x00\x33\x32\x90\x39\x1b\xc8\x25\x14\xe9\x60\x96\x33\xe4\x51\x3e\xe7\x9e\x6d\x67\x6c\xde\x05\x5f\xb9\xd8\xa4\x4b\xf4\xc6\x20\xe3\x3a\x31\xe3\xcc\x4d\x39\xc2\xc1\x94\xc4\xf9\x94\xc4\x61\x4c\x31\x14\xc1\x94\xab\x64\x93\xda\x99\x22\x57\xa5\x14\x61\x76\xdb\x3c\x57\xda\xc4\x4b\x33\x46\x38\xe6\xc2\x80\xb3\xdb\x13\x3b\x52\xaf\x93\x3e\x2c\x1c\xc0\xf3\xe7\x1e\x16\x4e\xbf\xf4\xb0\x70\x7a\x50\x58\x38\xed\xc3\xc2\xa1\xb3\x3f\xbb\xb0\x10\x79\x2a\x39\x70\xbb\x70\x10\x97\x07\x11\xd6\x8e\x98\x76\x04\xb4\x12\x67\x2b\xea\x76\x8a\x14\x07\x55\x27\xfa\x52\xc4\xb1\xa5\x88\xe1\xa8\xa8\x45\x0c\x47\x5f\x78\x31\xa2\x56\x7d\x38\xa2\x1e\x71\x76\xde\xd7\x23\xfa\x7a\x44\xc1\x52\x9f\x78\x1e\x3e\xff\xa9\x13\x4f\x6d\x33\x5f\x74\xe2\x79\xe0\x33\x88\xf3\x3e\xf1\x3c\x70\xf6\x67\x97\x78\x9a\xc9\xc9\x68\xc7\xff\xda\x2f\x9b\xc8\xa8\xb7\x20\x85\xf5\x9d\xce\x5e\x8e\x5e\xbe\xac\x59\xdf\x2f\x90\xe2\x25\x5c\xb7\xdc\xec\x9c\xde\x7a\xc0\x62\x17\xef\x2d\x87\x2c\x36\x86\xc4\xb8\x48\x21\xed\x60\x44\x3f\x61\x4a\xf9\x8b\xc8\x4b\x46\xbd\xc3\x6f\xcf\x73\xef\xf0\x41\xef\xf0\x7b\x87\x7f\xf4\xec\xa7\x72\xf8\x59\x37\x7f\xff\x30\x47\xeb\x0e\xf0\xfc\x1d\x8c\xe7\x37\x9e\x0b\x00\x8b\xe3\xf2\x99\xe0\x31\x96\x12\xa3\x81\xbe\x0f\x12\xb8\xc0\x60\x8a\x31\x03\x02\x2f\xa1\x40\x18\x81\xa1\xef\x83\xcb\x5f\xdf\x03\xc5\xaf\x31\x93\x80\xb0\xa3\x11\xaf\x35\xe2\x25\xa4\x14\xab\x41\xe4\x65\x7d\x98\x69\xcf\x73\x1f\x66\x40\x1f\x66\xfa\x30\x73\xf4\xec\xa7\x0a\x33\xf5\xf3\xc1\xb9\x52\x9c\x81\x14\x23\x92\xa7\x40\x40\x44\x72\x79\x1f\xae\x6b\x53\x50\xf4\xed\xfb\x24\xcd\x16\xbf\xeb\xcc\xd2\x9d\xb9\x47\xb8\xb7\x0e\xcf\x27\xc1\x93\xba\xa7\x2f\xc7\xa1\x3c\xe6\x61\xc9\x76\xd2\x7d\xce\x95\xdd\x66\xaa\x9f\xc2\x12\xeb\x14\x1c\x6f\x95\xd5\xf3\xa7\xb3\x29\x1c\x7d\x5f\x88\xd7\x1e\x25\x68\x61\xb4\xc5\x10\xeb\x99\x6e\x4a\xd0\xc5\x61\xd6\xff\x3f\x23\xae\x29\x06\x82\x44\xe0\xd9\xd8\xf9\xf8\x71\xf0\x8e\xb0\xeb\x4f\x9f\xba\xe7\x33\x5b\xd7\xce\x2b\x23\x56\x7b\x3e\x90\x9c\x12\x04\xea\x4a\x6d\xd2\x52\xf9\xf4\xae\xfa\x0e\xd7\xbd\xa8\x8e\xea\xff\x58\xdc\xad\xb1\x57\xd9\xca\xc6\x92\xf2\xcb\x8e\x06\xf7\x1d\x75\x71\x26\x3f\xf2\xfb\x16\x28\x50\x1c\xd8\xb7\x83\x23\x0f\x4e\xba\xa5\x20\xd5\xab\x5b\x3a\x52\x81\x72\x7c\x66\x51\x01\xf2\x24\x79\x55\xc7\x72\xeb\x11\x58\x0f\x3f\x20\x00\xea\x0f\x73\xf1\x2a\x83\xac\xed\x99\xfe\x9d\xeb\xb9\x3c\x9e\xab\xb8\xeb\x1d\xc7\xb8\xfd\xa2\x5a\x11\x20\x7d\x67\xd2\x9f\xae\xe8\x4f\x57\xf4\xa7\x2b\xfa\xd3\x15\xcf\x28\x07\xef\x4f\x57\x74\x39\x5d\x91\x95\x8b\x88\x71\x45\x62\x7c\x74\x2e\xfa\x28\x55\xf0\xd1\x33\xac\x82\x7f\xa0\x18\x4a\x0c\x10\x07\x8c\x2b\x20\x70\x46\xd7\x3a\x5d\x54\x09\x91\x00\xa7\x90\xd0\x0e\x25\xea\x5e\x39\x1d\x95\x73\xc1\xb3\xb5\x71\x87\xe0\xbf\xff\x01\x23\x7f\xf8\xca\xa6\xf1\x03\xf0\x86\x52\x60\x3a\x24\x10\x58\x62\xb1\xc0\xc8\xe8\xa9\x4f\x0e\xfb\xe4\x70\xef\xa8\x7b\x48\x0e\x9b\xb7\x58\xcd\x54\x34\x62\xde\x8b\x2d\xf2\xec\x3b\xe6\x95\xdf\x3a\xd8\xe0\xb4\x38\xca\x69\xd1\x0b\xd7\x05\x99\xc0\x0b\xcc\x14\xf8\x51\xbb\x29\xc0\x19\x20\x3f\x5f\x02\x6d\x2c\x40\xdb\x0e\x48\x21\x23\x59\x6e\x5f\x4a\x01\xae\x3b\x39\x89\x10\x59\x94\x26\x5a\xfd\x2d\x8d\x70\x99\x10\x85\x4d\xe0\xc7\x01\xe3\x4b\x01\x33\x63\x73\xc1\xf0\x2c\x5b\x81\x98\xe7\x82\x6c\xed\xf7\x7d\x67\xf2\x0d\x9b\xca\x2c\x04\x77\x7f\x18\xea\x5b\x8f\xbe\x9f\x8f\x2e\x38\x4f\x22\x0f\x91\x85\x16\xb5\xd5\x5c\x64\x7e\xb1\x6c\xf2\xbf\x00\x00\x00\xff\xff\xa1\x0d\x6b\x1c\xdb\x4d\x00\x00")

func airdropHtmlBytes() ([]byte, error) {
	return bindataRead(
		_airdropHtml,
		"airdrop.html",
	)
}

func airdropHtml() (*asset, error) {
	bytes, err := airdropHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "airdrop.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"airdrop.html": airdropHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"airdrop.html": &bintree{airdropHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
